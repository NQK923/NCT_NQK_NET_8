// <auto-generated />
using System;
using MangaService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaService.Migrations
{
    [DbContext(typeof(MangaDbContext))]
    [Migration("20241109093919_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MangaService.Models.Manga", b =>
                {
                    b.Property<int>("IdManga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdManga"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfChapter")
                        .HasColumnType("int");

                    b.Property<int>("RatedNum")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("IdManga");

                    b.ToTable("Manga");
                });

            modelBuilder.Entity("MangaService.Models.MangaFavorite", b =>
                {
                    b.Property<int>("IdManga")
                        .HasColumnType("int");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotification")
                        .HasColumnType("bit");

                    b.HasKey("IdManga", "IdAccount");

                    b.ToTable("MangaFavorite");
                });

            modelBuilder.Entity("MangaService.Models.MangaHistory", b =>
                {
                    b.Property<int>("IdManga")
                        .HasColumnType("int");

                    b.Property<int>("IdAccount")
                        .HasColumnType("int");

                    b.Property<int>("IndexChapter")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("IdManga", "IdAccount");

                    b.ToTable("MangaHistory");
                });

            modelBuilder.Entity("MangaService.Models.MangaViewHistory", b =>
                {
                    b.Property<int>("IdManga")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("IdManga", "Time");

                    b.ToTable("MangaViewHistory");
                });

            modelBuilder.Entity("MangaService.Models.MangaFavorite", b =>
                {
                    b.HasOne("MangaService.Models.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("IdManga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MangaService.Models.MangaHistory", b =>
                {
                    b.HasOne("MangaService.Models.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("IdManga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MangaService.Models.MangaViewHistory", b =>
                {
                    b.HasOne("MangaService.Models.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("IdManga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });
#pragma warning restore 612, 618
        }
    }
}
